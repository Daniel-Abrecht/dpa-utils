#ifndef DPA__U_SET_AND_MAP_TEMPLATE
#define DPA__U_SET_AND_MAP_TEMPLATE

#include <dpa/utils/bo.h>
#include <stdint.h>
#include <limits.h>

#define DPA__U_SM_KIND_SET 1
#define DPA__U_SM_KIND_MAP 2

// This variable is to help with benchmarks
dpa__u_api_var extern long dpa_u_total_resize_time;

#define DPA__U_SM_BITMAP_OFFSET(INDEX) ((INDEX)/(sizeof(dpa_u_bitmap_entry_t)*CHAR_BIT))
#define DPA__U_SM_BITMAP_BIT(INDEX) (((dpa_u_bitmap_entry_t)1)<<((INDEX)%(sizeof(dpa_u_bitmap_entry_t)*CHAR_BIT)))

// TODO: Make these parameters changable using the config
// TODO: Handle DPA__U_SM_MIN_SIZE >= DPA__U_SM_EXPECTED_BITMAP_SIZE
// TODO: A too low DPA__U_SM_MIN_LBSIZE or DPA__U_SM_SET_OVERSIZE_INVERSE_FACTOR may allow a small set to fully fill up, make sure there is always at least 2 free.

#ifndef DPA__U_SM_SET_OVERSIZE_INVERSE_FACTOR
// Ensure there is some free space left 100/8 = 12.5%
#define DPA__U_SM_SET_OVERSIZE_INVERSE_FACTOR 8
#endif
/* At any point, 1 entry needs to be free for this to work. Or is it 2? Anyways, this ensures there will be enough. */
#define DPA__U_SM_REQUIRED_MIN_FREE_ENTRIES 1
#ifndef DPA__U_SM_MIN_LBSIZE
#define DPA__U_SM_MIN_LBSIZE 5
#endif

#define DPA__U_SM_MIN_SIZE (1u<<DPA__U_SM_MIN_LBSIZE)

#define DPA__U_SM_EXPECTED_BITMAP_SIZE(T) ((1ull<<(sizeof(T)*CHAR_BIT)) / CHAR_BIT)
#define DPA__U_SM_LIST_OR_BITMAP_SIZE_THRESHOLD_SET(T) (( \
     (1ull<<DPA_U_CONSTEXPR_LOG2(DPA__U_SM_EXPECTED_BITMAP_SIZE(T) / 2 / sizeof(T))) \
   * DPA__U_SM_SET_OVERSIZE_INVERSE_FACTOR + DPA__U_SM_SET_OVERSIZE_INVERSE_FACTOR \
  ) / (DPA__U_SM_SET_OVERSIZE_INVERSE_FACTOR+1))
#define DPA__U_SM_LIST_OR_BITMAP_SIZE_THRESHOLD_MAP(T) (( \
     (1ull<<DPA_U_CONSTEXPR_LOG2(DPA__U_SM_EXPECTED_BITMAP_SIZE(T) / 2 * (1 + sizeof(void*)*CHAR_BIT) / (sizeof(T) + sizeof(void*)) )) \
   * DPA__U_SM_SET_OVERSIZE_INVERSE_FACTOR + DPA__U_SM_SET_OVERSIZE_INVERSE_FACTOR \
  ) / (DPA__U_SM_SET_OVERSIZE_INVERSE_FACTOR+1))


#endif

#define DPA__U_SM_NO_BITSET
#define DPA__U_SM_KEY_TYPE void*
#define DPA__U_SM_KEY_TYPE_U uintptr_t
#define DPA__U_SM_NAME pointer
#include <dpa/utils/_set-and-map.common.h>

#define DPA__U_SM_MICRO_SET
#define DPA__U_SM_KEY_TYPE unsigned char
#define DPA__U_SM_NAME uc
#include <dpa/utils/_set-and-map.common.h>

#if USHRT_MAX >= UINTPTR_MAX
#define DPA__U_SM_NO_BITSET
#endif
#define DPA__U_SM_KEY_TYPE unsigned short
#define DPA__U_SM_NAME us
#include <dpa/utils/_set-and-map.common.h>

#if UINT_MAX >= UINTPTR_MAX
#define DPA__U_SM_NO_BITSET
#endif
#define DPA__U_SM_KEY_TYPE unsigned
#define DPA__U_SM_NAME u
#include <dpa/utils/_set-and-map.common.h>

#if ULONG_MAX >= UINTPTR_MAX
#define DPA__U_SM_NO_BITSET
#endif
#define DPA__U_SM_KEY_TYPE unsigned long
#define DPA__U_SM_NAME lu
#include <dpa/utils/_set-and-map.common.h>

#if ULLONG_MAX >= UINTPTR_MAX
#define DPA__U_SM_NO_BITSET
#endif
#define DPA__U_SM_KEY_TYPE unsigned long long
#define DPA__U_SM_NAME llu
#include <dpa/utils/_set-and-map.common.h>

#define DPA__U_SM_NO_BITSET
#define DPA__U_SM_KEY_TYPE size_t
#define DPA__U_SM_NAME z
#include <dpa/utils/_set-and-map.common.h>

#ifdef UINT8_MAX
#define DPA__U_SM_MICRO_SET
#define DPA__U_SM_KEY_TYPE uint8_t
#define DPA__U_SM_NAME u8
#include <dpa/utils/_set-and-map.common.h>
#endif

#ifdef UINT16_MAX
#if UINT16_MAX >= UINTPTR_MAX
#define DPA__U_SM_NO_BITSET
#endif
#define DPA__U_SM_KEY_TYPE uint16_t
#define DPA__U_SM_NAME u16
#include <dpa/utils/_set-and-map.common.h>
#endif

#ifdef UINT24_MAX
#if UINT24_MAX >= UINTPTR_MAX
#define DPA__U_SM_NO_BITSET
#endif
#define DPA__U_SM_KEY_TYPE uint24_t
#define DPA__U_SM_NAME u24
#include <dpa/utils/_set-and-map.common.h>
#endif

#ifdef UINT32_MAX
#if UINT32_MAX >= UINTPTR_MAX
#define DPA__U_SM_NO_BITSET
#endif
#define DPA__U_SM_KEY_TYPE uint32_t
#define DPA__U_SM_NAME u32
#include <dpa/utils/_set-and-map.common.h>
#endif

#ifdef UINT64_MAX
#if UINT64_MAX >= UINTPTR_MAX
#define DPA__U_SM_NO_BITSET
#endif
#define DPA__U_SM_KEY_TYPE uint64_t
#define DPA__U_SM_NAME u64
#include <dpa/utils/_set-and-map.common.h>
#endif

#ifdef DPA_HAS_UINT128
#define DPA__U_SM_NO_BITSET
#define DPA__U_SM_KEY_TYPE dpa_uint128_t
#define DPA__U_SM_NAME u128
#include <dpa/utils/_set-and-map.common.h>
#endif

#ifdef DPA_HAS_UINT256
#define DPA__U_SM_NO_BITSET
#define DPA__U_SM_KEY_TYPE dpa_uint256_t
#define DPA__U_SM_NAME u256
#include <dpa/utils/_set-and-map.common.h>
#endif

#define DPA__U_SM_BO
#define DPA__U_SM_NO_BITSET
#define DPA__U_SM_KEY_TYPE dpa_u_bo_unique_t
#define DPA__U_SM_KEY_TYPE_U dpa__u_bo_unique_reversible_hash_t
#define DPA__U_SM_NAME string
#include <dpa/utils/_set-and-map.common.h>

#undef DPA__U_SM_TEMPLATE
#undef DPA__U_SM_KIND
