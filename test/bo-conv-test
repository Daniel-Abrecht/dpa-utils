#!/bin/bash

set -e

[ -n "$TYPE" ]

type_k=(
  "name"
  "alias"
  "simple"
  "variant"
  "derived"
  "any"
  "opaque"
  "ro"
  "pointer"
  "hased"
  "refcounted"
  "unconvertable"
  # dtypes
  "di"
  "du"
  "ds"
  "dh"
  "dr"
  "drh"
)

type_v=(
# name                         alias s v d a o r p h r u  i u s h r rh
  "bo_inline                    i    1 0 0 0 0 X 0 1 2 1  1 0 0 0 0 0"
  "bo_unique_hashmap            uh   1 0 0 0 0 1 1 1 1 1  0 1 0 0 0 0"
  "bo_simple_ro                 sr   1 0 0 0 0 1 0 0 0 0  0 0 1 0 0 0"
  "bo_simple                    s    1 0 0 0 0 0 0 0 0 0  0 0 1 0 0 0"
  "bo_unique                    u    0 1 0 0 0 1 0 1 2 1  1 1 0 0 0 0"
  "bo_ro                        br   0 1 0 0 0 1 0 X X 0  1 1 1 0 0 0"
  "bo                           b    0 1 0 0 0 0 0 X X 0  1 0 1 0 0 0"
  "bo_hashed_ro                 hr   0 0 1 0 0 1 0 1 0 0  0 0 0 1 0 0"
  "bo_hashed                    h    0 0 1 0 0 0 0 1 0 0  0 0 0 1 0 0"
  "bo_refcounted_ro             rr   0 0 1 0 0 1 0 0 1 0  0 0 0 0 1 0"
  "bo_refcounted                r    0 0 1 0 0 0 0 0 1 0  0 0 0 0 1 0"
  "bo_refcounted_hashed_ro      rhr  0 0 1 0 0 1 0 1 1 0  0 0 0 0 0 1"
  "any_bo_inline                ai   0 0 0 1 1 1 0 1 2 1  1 0 0 0 0 0"
  "any_bo_unique_hashmap        auh  0 0 0 1 1 1 0 1 1 1  0 1 0 0 0 0"
  "any_bo_simple_ro             asr  0 0 0 1 1 1 0 X X 0  0 1 1 1 1 1"
  "any_bo_simple                as   0 0 0 1 1 0 0 X X 0  0 0 1 1 1 0"
  "any_bo_unique                au   0 0 0 1 1 1 0 1 2 1  1 1 0 0 0 0"
  "any_bo_ro                    abr  0 0 0 1 1 1 0 X X 0  1 1 1 1 1 1"
  "any_bo                       ab   0 0 0 1 1 0 0 X X 0  1 0 1 1 1 0"
  "any_bo_hashed_ro             ahr  0 0 0 1 1 1 0 1 0 0  0 1 0 1 0 0"
  "any_bo_hashed                ah   0 0 0 1 1 0 0 1 0 0  0 0 0 1 0 0"
  "any_bo_refcounted_ro         arr  0 0 0 1 1 1 0 X 1 0  0 0 0 0 1 1"
  "any_bo_refcounted            ar   0 0 0 1 1 0 0 0 1 0  0 0 0 0 1 0"
  "any_bo_refcounted_hashed_ro  arhr 0 0 0 1 1 1 0 1 1 0  0 0 0 0 0 1"
  "bo_with_hash_ro              whr  0 0 0 0 1 1 0 1 0 0  1 1 0 1 0 1"
  "bo_with_hash                 wh   0 0 0 0 1 0 0 1 0 0  1 0 0 1 0 0"
  "bo_gc_ro                     gcr  0 0 0 0 1 1 0 X 2 0  1 1 0 0 1 1"
  "bo_with_refcount_ro          wrr  0 0 0 0 1 1 0 X 1 0  0 1 0 0 1 1"
  "bo_with_refcount             wr   0 0 0 0 1 0 0 X 1 0  0 0 0 0 1 0"
  "bo_with_refcount_and_hash_ro wrhr 0 0 0 0 1 1 0 1 1 0  0 1 0 0 0 1"
)

stype_k=(
  "dname"
  "dalias"
  "dvalue"
  "dderived"
)

dtype_v=(
  "BO_INLINE            di  1 0"
  "BO_UNIQUE_HASHMAP    du  2 0"
  "BO_SIMPLE            ds  3 0"
  "BO_HASHED            dh  4 1"
  "BO_REFCOUNTED        dr  5 1"
  "BO_REFCOUNTED_HASHED drh 6 1"
)

declare -A t

type-unpack(){
  t=()
  t[name]="$1"; shift
  t[alias]="$1"; shift
  t[simple]="$1"; shift
  t[variant]="$1"; shift
  t[derived]="$1"; shift
  t[any]="$1"; shift
  t[opaque]="$1"; shift
  t[ro]="$1"; shift
  t[pointer]="$1"; shift
  t[hashed]="$1"; shift
  t[refcounted]="$1"; shift
  t[unconvertable]="$1"; shift
  t[di]="$1"; shift
  t[du]="$1"; shift
  t[ds]="$1"; shift
  t[dh]="$1"; shift
  t[dr]="$1"; shift
  t[drh]="$1"; shift
  dtypes=()
  dbtypes=()
  local dbs=
  if [ "${t[di]}"  = 1 ]; then dtypes+=( BO_INLINE ); fi
  if [ "${t[du]}"  = 1 ]; then dtypes+=( BO_UNIQUE_HASHMAP ); fi
  dbtypes=("${dtypes[@]}")
  if [ "${t[ds]}"  = 1 ]; then dbs=1; dtypes+=( BO_SIMPLE ); fi
  if [ "${t[dh]}"  = 1 ]; then dbs=1; dtypes+=( BO_HASHED ); fi
  if [ "${t[dr]}"  = 1 ]; then dbs=1; dtypes+=( BO_REFCOUNTED ); fi
  if [ "${t[drh]}" = 1 ]; then dbs=1; dtypes+=( BO_REFCOUNTED_HASHED ); fi
  if [ "$dbs" = 1 ]; then dbtypes+=( BO_SIMPLE ); fi  
}

type-k-index(){
  x="$1"
  for i in "${!type_k[@]}"
  do
    if [[ "${type_k[$i]}" = "$x" ]]
    then
      echo "$i"
      return 0
    fi
  done
  return 1
}

dtype-k-index(){
  x="$1"
  for i in "${!dtype_k[@]}"
  do
    if [[ "${dtype_k[$i]}" = "$x" ]]
    then
      echo "$i"
      return 0
    fi
  done
  return 1
}

type-lookup(){
  key="$1"; shift
  value="$1"; shift
  result=()
  ki="$(type-k-index "$key")"
  for e in "${type_v[@]}"
  do
    e2=( $e )
    if [ "${e2[$ki]}" = "$value" ]
    then
      result+=("$e")
    fi
  done
}

dtype-lookup(){
  key="$1"; shift
  value="$1"; shift
  result=()
  ki="$(dtype-k-index "$key")"
  for e in "${dtype_v[@]}"
  do
    e2=( $e )
    if [ "${e2[$ki]}" = "$value" ]
    then
      result+=("$e")
    fi
  done
}

in-array(){
  needle="$1"; shift
  for entry in "$@"
  do
    if [ "$entry" = "$needle" ]
      then return 0
    fi
  done
  return 1
}

is-subset(){
  local -n a="$1"
  local -n b="$2"
  for v in "${a[@]}"
  do
    if ! in-array "$v" "${b[@]}"
      then return 1
    fi
  done
  return 0
}

is-same-set(){
  local -n a="$1"
  local -n b="$2"
  [ "${#a[@]}" = "${#a[@]}" ] && is-subset "$1" "$2"
}

dump-dict(){
  local -n a="$1"
  printf '{ '
  for k in "${!a[@]}"
  do
    printf '"%q": "%q", ' "$k" "${a[$k]}"
  done | head -c -2
  echo ' }'
}

gen-t-conv-list(){
  t_conv=()
  for e in "${type_v[@]}"
  do
    type-unpack $e
    declare -A "target=( ${t[@]@K} )"
    target_dtypes=( "${dtypes[@]}" )
    target_dbtypes=( "${dbtypes[@]}" )
    if [ "${t[opaque]}" = 1 ]; then continue; fi # Maybe those will be implemented at a later point
    for e in "${type_v[@]}"
    do
      type-unpack $e
      if [ "${target[ro]}" != 1 ] && [ "${t[ro]}" = 1 ]; then continue; fi
      if ! is-subset dbtypes target_dbtypes && [ "${target[unconvertable]}" = 1 ]; then continue; fi
      if [ "${target[hashed]}" = 1 ] && [ "${t[hashed]}" != 1 ]; then continue; fi
      if [ "${target[refcounted]}" = 1 ] && [ "${t[refcounted]}" != 1 ]; then continue; fi
      t_conv+=("${target[name]} ${t[name]} v")
      if [ "${t[pointer]}" != 1 ] && [ "${t[opaque]}" != 1 ]
      then
        t_conv+=("${target[name]} ${t[name]} cv")
        t_conv+=("${target[name]} ${t[name]} p")
        t_conv+=("${target[name]} ${t[name]} cp")
      fi
    done
  done
}

gen-tp-conv-list(){
  tp_conv=()
  for e in "${type_v[@]}"
  do
    type-unpack $e
    declare -A "target=( ${t[@]@K} )"
    target_dtypes=( "${dtypes[@]}" )
    target_dbtypes=( "${dbtypes[@]}" )
    for e in "${type_v[@]}"
    do
      type-unpack $e
      if [ "${target[ro]}" != 1 ] && [ "${t[ro]}" = 1 ]; then continue; fi
      if ! is-subset dbtypes target_dbtypes && [ "${target[unconvertable]}" = 1 ]; then continue; fi
      if [ "${target[hashed]}" = 1 ] && [ "${t[hashed]}" != 1 ]; then continue; fi
      if [ "${target[refcounted]}" = 1 ] && [ "${t[refcounted]}" != 1 ]; then continue; fi
      if [ "${target[refcounted]}" = 2 ] && [ "${t[refcounted]}" != 1 ] && [ "${t[refcounted]}" != 2 ]; then continue; fi
      tp_conv+=("${target[name]} ${t[name]} v")
      if [ "${t[pointer]}" != 1 ] && [ "${t[opaque]}" != 1 ]
      then
        tp_conv+=("${target[name]} ${t[name]} cv")
        tp_conv+=("${target[name]} ${t[name]} p")
        tp_conv+=("${target[name]} ${t[name]} cp")
      fi
    done
  done
}

gen-t-conv-test(){
  to="$1"; shift
  from="$1"; shift
  from_mode="$1"; shift
  macro="dpa_u_t_$to"
  to_type="dpa_u_${to}_t"
  type-lookup name "$to"
  type-unpack $result
  declare -A "to=( ${t[@]@K} )"
  to_dtypes=( "${dtypes[@]}" )
  from_type="dpa_u_${from}_t"
  type-lookup name "$from"
  type-unpack $result
  declare -A "from=( ${t[@]@K} )"
  from_dtypes=( "${dtypes[@]}" )
  if [ "${to[opaque]}" = 1 ]
  then
    to_type+='*'
    to[pointer]=1
  fi
  if [ "${from[opaque]}" = 1 ]
  then
    from_type+='*'
    from[pointer]=1
  fi
  fpp=''
  if [ "${from[pointer]}" != 1 ]
    then fpp='*'
  fi
  const=
  if [ "$from_mode" = cv ] || [ "$from_mode" = cp ]
    then const='const '
  fi
  for dt in "${from_dtypes[@]}"
  do
    dtv="P_$dt"
    if [ "$dt" = BO_UNIQUE_HASHMAP ] && [ "${from[name]}" != bo_unique_hashmap ] && [ "${from[opaque]}" != 1 ]
      then dtv="P_BO_UNIQUE"
    fi
    (
      cat <<EOF
#include <test/common.h>
int main(){
  $const$from_type$fpp from = ($const$from_type$fpp)$dtv;
EOF
      if [ "$from_mode" = p ] || [ "$from_mode" = cp ]
        then echo "  $to_type result = *&$macro(from);"
        else echo "  $to_type result = *&$macro(${fpp}from);"
      fi
      cat <<EOF
  if(sizeof(${dtv}_DATA)-1 != dpa_u_bo_get_size(result) || memcmp(${dtv}_DATA, dpa_u_bo_data(result), sizeof(${dtv}_DATA))){
    fprintf(stderr, "Buffer contained unexpected data\n");
    return 1;
  }
EOF
      if [ "${to[hashed]}" = 1 ]
      then cat <<EOF
    if(dpa_u_bo_get_hash(from) != dpa_u_bo_get_hash(result)){
      fprintf(stderr, "Hash missmatches\n");
      return 1;
    }
EOF
      fi
      cat <<EOF
}
EOF
    ) >"build/c/test/t-conv--${to[name]}-from-${from[name]}-$from_mode+$dtv.c"
    echo "${to[name]}-from-${from[name]}-$from_mode+$dtv" >>build/c/test/t-conv-tests
  done
}

gen-t-conv-tests(){
  ( set -e; cd build; mkdir -p c/test/; rm -f c/test/t-conv--*.c; )
  true >build/c/test/t-conv-tests
  for e in "${t_conv[@]}"
    do gen-t-conv-test $e
  done
}


gen-tp-conv-test(){
  to="$1"; shift
  from="$1"; shift
  from_mode="$1"; shift
  macro="dpa_u_tp_$to"
  to_type="dpa_u_${to}_t"
  type-lookup name "$to"
  type-unpack $result
  declare -A "to=( ${t[@]@K} )"
  to_dtypes=( "${dtypes[@]}" )
  from_type="dpa_u_${from}_t"
  type-lookup name "$from"
  type-unpack $result
  declare -A "from=( ${t[@]@K} )"
  from_dtypes=( "${dtypes[@]}" )
  if [ "${to[opaque]}" = 1 ]
  then
    to_type+='*'
    to[pointer]=1
  fi
  if [ "${from[opaque]}" = 1 ]
  then
    from_type+='*'
    from[pointer]=1
  fi
  fpp=''
  if [ "${from[pointer]}" != 1 ]
    then fpp='*'
  fi
  if [ "${to[pointer]}" != 1 ]
  then
    to_type+='*'
  fi
  const=
  if [ "$from_mode" = cv ] || [ "$from_mode" = cp ]
    then const='const '
  fi
  for dt in "${from_dtypes[@]}"
  do
    dtv="P_$dt"
    if [ "$dt" = BO_UNIQUE_HASHMAP ] && [ "${from[name]}" != bo_unique_hashmap ] && [ "${from[opaque]}" != 1 ]
      then dtv="P_BO_UNIQUE"
    fi
    (
      cat <<EOF
#include <test/common.h>
int main(){
  $const$from_type$fpp from = ($const$from_type$fpp)$dtv;
EOF
      if [ "$from_mode" = p ] || [ "$from_mode" = cp ]
        then echo "  $to_type result = $macro(from);"
        else echo "  $to_type result = $macro(${fpp}from);"
      fi
      cat <<EOF
  if(sizeof(${dtv}_DATA)-1 != dpa_u_bo_get_size(result) || memcmp(${dtv}_DATA, dpa_u_bo_data(result), sizeof(${dtv}_DATA))){
    fprintf(stderr, "Buffer contained unexpected data\n");
    return 1;
  }
EOF
      if [ "${to[hashed]}" = 1 ]
      then cat <<EOF
    if(dpa_u_bo_get_hash(from) != dpa_u_bo_get_hash(result)){
      fprintf(stderr, "Hash missmatches\n");
      return 1;
    }
EOF
      fi
      cat <<EOF
}
EOF
    ) >"build/c/test/tp-conv--${to[name]}-from-${from[name]}-$from_mode+$dtv.c"
    echo "${to[name]}-from-${from[name]}-$from_mode+$dtv" >>build/c/test/tp-conv-tests
  done
}

gen-tp-conv-tests(){
  ( set -e; cd build; mkdir -p c/test/; rm -f c/test/tp-conv--*.c; )
  true >build/c/test/tp-conv-tests
  for e in "${tp_conv[@]}"
    do gen-tp-conv-test $e
  done
}

run-gen-t-conv-tests(){
  mkdir -p "build/$TYPE/bin/build/c/test/"
  dpa-testsuite t-conv make -r -s -f test/run-tests.mk -j$(nproc) TEST_FILE="build/c/test/t-conv-tests" TEST_PREFIX="build/$TYPE/bin/build/c/test/t-conv--"
}

run-gen-tp-conv-tests(){
  mkdir -p "build/$TYPE/bin/build/c/test/"
  dpa-testsuite tp-conv make -r -s -f test/run-tests.mk -j$(nproc) TEST_FILE="build/c/test/tp-conv-tests" TEST_PREFIX="build/$TYPE/bin/build/c/test/tp-conv--"
}

gen-t-conv-list
gen-t-conv-tests
gen-tp-conv-list
gen-tp-conv-tests

run-gen-t-conv-tests
run-gen-tp-conv-tests
